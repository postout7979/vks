<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Avi Controller 대시보드</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
      body {
        font-family: 'Inter', sans-serif;
      }
      #chart-popup {
          position: absolute;
          z-index: 100;
          display: none;
          background-color: #fff;
          border-radius: 8px;
          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
          padding: 1rem;
          width: 600px;
          height: 300px;
      }
    </style>
</head>
<body class="bg-gray-100 p-8">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-800">Virtual Service 목록</h1>
        <div class="flex space-x-4">
            <a href="{{ url_for('dashboard') }}" class="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition duration-300">대시보드 보기</a>
            <a href="{{ url_for('logout') }}" class="bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 transition duration-300">로그아웃</a>
        </div>
    </div>
    <div class="bg-white p-6 rounded-lg shadow-lg mb-6">
        <table class="min-w-full divide-y divide-gray-200 rounded-lg overflow-hidden">
            <thead class="bg-gray-50">
                <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">이름</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">UUID</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">최신 대역폭 (kbps)</th>
                </tr>
            </thead>
            <tbody id="vs-list-body" class="bg-white divide-y divide-gray-200">
                <!-- Virtual Service 목록이 여기에 동적으로 추가됩니다 -->
                <tr>
                    <td colspan="3" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
                        데이터를 불러오는 중...
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <!-- 팝업 차트 컨테이너 -->
    <div id="chart-popup" class="relative">
        <canvas id="performanceChart"></canvas>
    </div>

    <script>
        let myChart; // 차트 인스턴스를 저장할 변수

        document.addEventListener('DOMContentLoaded', function() {
            const vsListBody = document.getElementById('vs-list-body');
            const chartPopup = document.getElementById('chart-popup');
            const performanceChartCtx = document.getElementById('performanceChart').getContext('2d');

            async function fetchAndRenderVsList() {
                try {
                    const performanceUrl = window.location.origin + '/api/performance';
                    const response = await fetch(performanceUrl);

                    if (response.status === 401) {
                        window.location.href = "{{ url_for('login') }}";
                        return;
                    }

                    const data = await response.json();

                    if (data.error) {
                        throw new Error(data.error);
                    }

                    vsListBody.innerHTML = ''; // 기존 로딩 메시지 삭제

                    if (data.results && data.results.length > 0) {
                        data.results.forEach(vs => {
                            const row = document.createElement('tr');
                            row.className = 'hover:bg-gray-50';

                            // 최신 대역폭 값 가져오기
                            let latestBandwidth = 'N/A';
                            if (vs.series && vs.series[0] && vs.series[0].data && vs.series[0].data.length > 0) {
                                const latestDataPoint = vs.series[0].data[vs.series[0].data.length - 1];
                                latestBandwidth = (latestDataPoint.value / 1000).toFixed(2) + ' kbps';
                            }
                            
                            row.innerHTML = `
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600 cursor-pointer" data-uuid="${vs.entity_uuid}">${vs.metric_entity_name}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${vs.entity_uuid}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${latestBandwidth}</td>
                            `;
                            vsListBody.appendChild(row);
                        });

                        // 이벤트 리스너를 다시 등록
                        attachEventListeners();

                    } else {
                        const noDataRow = document.createElement('tr');
                        noDataRow.innerHTML = `
                            <td colspan="3" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
                                Virtual Service 데이터가 없습니다.
                            </td>
                        `;
                        vsListBody.appendChild(noDataRow);
                    }

                } catch (error) {
                    console.error('데이터를 불러오는 중 오류가 발생했습니다:', error);
                    vsListBody.innerHTML = `
                        <tr>
                            <td colspan="3" class="px-6 py-4 whitespace-nowrap text-sm text-red-500 text-center">
                                데이터를 불러오는 데 실패했습니다.
                            </td>
                        </tr>
                    `;
                }
            }

            // 마우스 이벤트 리스너를 추가하는 함수
            function attachEventListeners() {
                document.querySelectorAll('#vs-list-body tr').forEach(row => {
                    const vsNameCell = row.querySelector('td:first-child');
                    if (vsNameCell && vsNameCell.dataset.uuid) {
                        const uuid = vsNameCell.dataset.uuid;

                        vsNameCell.addEventListener('mouseenter', async (event) => {
                            try {
                                const vsPerformanceUrl = window.location.origin + `/api/performance/${uuid}`;
                                const response = await fetch(vsPerformanceUrl);
                                const data = await response.json();

                                if (data.results && data.results.length > 0) {
                                    const vsPerformance = data.results[0];
                                    const bandwidthData = vsPerformance.series[0].data.map(item => item.value / 1000); // bps -> kbps
                                    const timeLabels = vsPerformance.series[0].data.map(item => new Date(item.timestamp).toLocaleTimeString());

                                    // 이전 차트가 있으면 파괴
                                    if (myChart) {
                                        myChart.destroy();
                                    }

                                    // 새 차트 생성
                                    myChart = new Chart(performanceChartCtx, {
                                        type: 'line',
                                        data: {
                                            labels: timeLabels,
                                            datasets: [{
                                                label: `${vsPerformance.metric_entity_name} 대역폭 (kbps)`,
                                                data: bandwidthData,
                                                borderColor: 'rgb(75, 192, 192)',
                                                tension: 0.1,
                                                fill: false
                                            }]
                                        },
                                        options: {
                                            responsive: true,
                                            maintainAspectRatio: false,
                                            scales: {
                                                y: {
                                                    beginAtZero: true,
                                                    title: {
                                                        display: true,
                                                        text: 'kbps'
                                                    }
                                                }
                                            }
                                        }
                                    });

                                    // 팝업 위치 설정 및 표시
                                    chartPopup.style.left = `${event.pageX + 10}px`;
                                    chartPopup.style.top = `${event.pageY + 10}px`;
                                    chartPopup.style.display = 'block';

                                } else {
                                    console.error('해당 Virtual Service의 성능 데이터가 없습니다.');
                                }
                            } catch (error) {
                                console.error('차트 데이터를 불러오는 중 오류가 발생했습니다:', error);
                            }
                        });

                        vsNameCell.addEventListener('mouseleave', () => {
                            // 팝업 숨기기
                            chartPopup.style.display = 'none';
                        });
                    }
                });
            }

            fetchAndRenderVsList();
            // 5초마다 데이터 업데이트
            setInterval(fetchAndRenderVsList, 5000);
        });
    </script>
</body>
</html>

