<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Avi LB 성능 모니터링</title>
    <!-- Tailwind CSS를 사용해 스타일링합니다. -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chart.js를 사용해 라인 차트를 그립니다. -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
        body {
            font-family: 'Inter', sans-serif;
        }
        /* 차트 캔버스가 부모 컨테이너에 맞게 크기를 조절하도록 설정합니다. */
        .chart-container canvas {
            width: 100% !important;
            height: 100% !important;
        }
    </style>
</head>
<body class="bg-gray-100 p-8 flex flex-col items-center">

    <div class="flex justify-between items-center w-full mb-6">
        <h1 class="text-3xl font-bold text-gray-800">Avi LB 성능 모니터링</h1>
        <div class="flex space-x-4">
            <!-- HOME 버튼 추가 -->
            <a href="{{ url_for('index') }}" class="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition duration-300">HOME</a>
            <a href="{{ url_for('logout') }}" class="bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 transition duration-300">로그아웃</a>
        </div>
    </div>

    <!-- 전체 대역폭을 표시하는 영역입니다. -->
    <div class="bg-white p-6 rounded-lg shadow-lg mb-6 flex flex-col items-center w-full">
        <h2 class="text-xl font-semibold mb-4 text-gray-700">전체 VirtualService 대역폭 총합</h2>
        <div class="relative w-full text-center mb-4">
            <span id="total-bandwidth-display" class="text-4xl font-bold text-gray-800">0 kbps</span>
        </div>
    </div>

    <!-- 모든 VirtualService의 성능을 한 차트에 표시할 컨테이너입니다. -->
    <div class="bg-white p-6 rounded-lg shadow-lg w-full">
        <h2 class="text-xl font-semibold mb-4 text-gray-700">VirtualService L4 클라이언트 대역폭</h2>
        <!-- 이 부분이 반응형으로 수정되었습니다. -->
        <div class="chart-container mx-auto h-96 w-full">
            <canvas id="performanceChart"></canvas>
        </div>
        <p id="loading-message" class="text-center text-gray-500 text-lg">데이터를 불러오는 중입니다...</p>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            let performanceChart = null; // Chart.js 인스턴스를 저장할 변수입니다.

            // `/api/performance` 엔드포인트에서 데이터를 가져오고 차트를 업데이트하는 함수입니다.
            async function updateDashboard() {
                try {
                    const apiUrl = window.location.origin + '/api/performance';
                    const response = await fetch(apiUrl);

                    // HTTP 상태 코드가 401이면 로그인 페이지로 리디렉션합니다.
                    if (response.status === 401) {
                        window.location.href = "{{ url_for('login') }}";
                        return;
                    }

                    const data = await response.json();
                    
                    const loadingMessage = document.getElementById('loading-message');
                    if (loadingMessage) {
                        loadingMessage.style.display = 'none';
                    }

                    if (data && data.results && data.results.length > 0) {
                        const datasets = [];
                        const allTimestamps = [];
                        let totalBandwidth = 0;
                        const colors = ['#4F46E5', '#EF4444', '#10B981', '#F59E0B', '#6366F1', '#EC4899', '#3B82F6', '#8B5CF6'];

                        // 각 가상 서비스(virtualservice)에 대한 데이터셋을 만듭니다.
                        data.results.forEach((vsData, index) => {
                            const name = vsData.metric_entity_name;
                            const bandwidthData = vsData.series[0].data;

                            // 마지막 데이터 포인트의 값을 전체 대역폭에 더합니다.
                            if (bandwidthData.length > 0) {
                                totalBandwidth += bandwidthData[bandwidthData.length - 1].value;
                            }

                            // 모든 데이터 포인트의 'timestamp' 값을 수집합니다.
                            bandwidthData.forEach(point => allTimestamps.push(point.timestamp));

                            const dataset = {
                                label: name, // 데이터셋의 이름은 가상 서비스 이름입니다.
                                data: bandwidthData.map(d => (d.value / 1000).toFixed(2)), // 데이터 값을 kbps로 변환합니다.
                                borderColor: colors[index % colors.length], // 미리 정의된 색상을 순환하며 사용합니다.
                                tension: 0.1, // 라인 차트를 부드럽게 만듭니다.
                                fill: false, // 영역을 채우지 않아 여러 라인 가시성을 높입니다.
                                pointStyle: 'circle',
                                pointRadius: 5,
                                pointHoverRadius: 7
                            };
                            datasets.push(dataset);
                        });
                        
                        // 모든 타임스탬프를 정렬하고 고유한 값만 남겨 라벨로 사용합니다.
                        const uniqueLabels = [...new Set(allTimestamps)].sort((a, b) => a - b).map(ts => new Date(ts).toLocaleTimeString());
                        
                        // 전체 대역폭 표시를 업데이트합니다.
                        updateTotalBandwidthDisplay(totalBandwidth);

                        // 차트를 생성하거나 업데이트합니다.
                        const ctx = document.getElementById('performanceChart').getContext('2d');
                        if (performanceChart) {
                            // 기존 차트가 있으면 데이터를 업데이트합니다.
                            performanceChart.data.labels = uniqueLabels;
                            performanceChart.data.datasets = datasets;
                            performanceChart.update();
                        } else {
                            // 차트가 없으면 새로 생성합니다.
                            performanceChart = new Chart(ctx, {
                                type: 'line', // 차트 종류는 라인 차트입니다.
                                data: {
                                    labels: uniqueLabels,
                                    datasets: datasets
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    plugins: {
                                        legend: {
                                            position: 'top',
                                            labels: {
                                                font: {
                                                    size: 14,
                                                }
                                            }
                                        },
                                        tooltip: {
                                            callbacks: {
                                                label: function(context) {
                                                    let label = context.dataset.label || '';
                                                    if (label) {
                                                        label += ': ';
                                                    }
                                                    if (context.parsed.y !== null) {
                                                        label += new Intl.NumberFormat('ko-KR', { maximumFractionDigits: 2 }).format(context.parsed.y) + ' kbps';
                                                    }
                                                    return label;
                                                }
                                            }
                                        }
                                    },
                                    scales: {
                                        x: {
                                            title: {
                                                display: true,
                                                text: '시간',
                                            }
                                        },
                                        y: {
                                            title: {
                                                display: true,
                                                text: '대역폭 (kbps)',
                                            },
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });
                        }
                    } else {
                        document.getElementById('loading-message').textContent = '데이터가 없습니다.';
                    }
                } catch (error) {
                    console.error('대시보드 업데이트 중 오류 발생:', error);
                    document.getElementById('loading-message').textContent = '대시보드 업데이트 중 오류가 발생했습니다.';
                }
            }

            // 전체 대역폭 표시를 업데이트하는 함수입니다.
            function updateTotalBandwidthDisplay(totalBps) {
                const totalKbps = (totalBps / 1000).toFixed(2);
                document.getElementById('total-bandwidth-display').textContent = `${totalKbps} kbps`;
            }

            // 대시보드를 초기화하고 5초마다 업데이트합니다.
            updateDashboard();
            setInterval(updateDashboard, 5000);
        });
    </script>
</body>
</html>

