<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Avi LB 성능 모니터링</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
      body {
        font-family: 'Inter', sans-serif;
      }
      .chart-card {
        min-height: 400px;
      }
    </style>
</head>
<body class="bg-gray-100 p-8">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-800">Avi LB 성능 모니터링</h1>
        <a href="{{ url_for('logout') }}" class="bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 transition duration-300">로그아웃</a>
    </div>

    <div id="chart-list" class="grid grid-cols-1 gap-6">
        <!-- 여러 VirtualService를 담는 하나의 차트가 여기에 생성됩니다. -->
        <p id="loading-message" class="text-center text-gray-500 text-lg">데이터를 불러오는 중입니다...</p>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let charts = {}; // 차트 인스턴스를 저장할 객체
            // 각 데이터셋에 할당할 색상 배열
            const colors = [
                'rgb(75, 192, 192)',
                'rgb(255, 99, 132)',
                'rgb(54, 162, 235)',
                'rgb(255, 205, 86)',
                'rgb(153, 102, 255)',
                'rgb(201, 203, 207)',
                'rgb(255, 159, 64)'
            ];

            // API에서 모든 성능 데이터를 가져와 차트를 생성/업데이트하는 메인 함수
            async function initializeDashboard() {
                try {
                    const apiUrl = window.location.origin + '/api/performance';
                    const response = await fetch(apiUrl);
                    
                    if (response.status === 401) {
                        window.location.href = "{{ url_for('login') }}";
                        return;
                    }

                    const data = await response.json();
                    
                    const loadingMessage = document.getElementById('loading-message');
                    if (loadingMessage) {
                        loadingMessage.style.display = 'none';
                    }
                    
                    if (data && data.results && data.results.length > 0) {
                        const chartList = document.getElementById('chart-list');
                        
                        // 단일 차트 카드에 여러 데이터셋을 표시하므로, chartList를 비우지 않습니다.
                        
                        // 하나의 차트에 여러 라인을 그릴 데이터를 준비합니다.
                        const datasets = data.results.map((vsData, index) => {
                            const name = vsData.name;
                            const bandwidthData = vsData.series && vsData.series.length > 0 ? vsData.series[0].data : [];
                            // 값을 bps에서 kbps로 변환
                            const values = bandwidthData.map(d => (d.value / 1000).toFixed(2));

                            return {
                                label: name,
                                data: values,
                                borderColor: colors[index % colors.length],
                                tension: 0.1,
                                fill: false
                            };
                        });
                        
                        // 라벨은 모든 데이터의 타임스탬프를 병합하여 만듭니다.
                        const allTimestamps = data.results.flatMap(vsData => 
                            vsData.series && vsData.series.length > 0 ? vsData.series[0].data.map(d => d.timestamp) : []
                        ).sort((a, b) => a - b);
                        const uniqueLabels = [...new Set(allTimestamps)].map(ts => new Date(ts).toLocaleTimeString());

                        // 차트를 업데이트하거나 새로 생성합니다.
                        updateOrCreateChart('combined-chart', 'VirtualService L4 클라이언트 대역폭', uniqueLabels, datasets);

                    } else {
                        document.getElementById('chart-list').innerHTML = 
                            '<p class="text-center text-gray-500 text-lg">데이터가 없습니다.</p>';
                    }

                } catch (error) {
                    console.error('Error initializing dashboard:', error);
                    document.getElementById('chart-list').innerHTML = 
                        '<p class="text-center text-red-500 text-lg">대시보드 초기화 중 오류가 발생했습니다.</p>';
                }
            }

            // 차트를 업데이트하거나 새로 생성하는 함수 (이제 단일 차트를 관리)
            function updateOrCreateChart(id, title, labels, datasets) {
                const chartList = document.getElementById('chart-list');
                let chartCard = document.getElementById(`card-${id}`);
                let chartInstance = charts[id];

                if (!chartCard) {
                    // 차트 카드가 없으면 새로 생성
                    chartCard = document.createElement('div');
                    chartCard.id = `card-${id}`;
                    chartCard.className = 'bg-white p-6 rounded-lg shadow-lg chart-card';
                    chartCard.innerHTML = `
                        <h2 class="text-xl font-semibold mb-4 text-gray-700">${title}</h2>
                        <canvas id="chart-${id}"></canvas>
                    `;
                    chartList.appendChild(chartCard);
                }

                if (chartInstance) {
                    // 기존 차트가 있으면 데이터만 업데이트
                    chartInstance.data.labels = labels;
                    chartInstance.data.datasets = datasets;
                    chartInstance.update();
                } else {
                    // 차트가 없으면 새로 생성
                    const ctx = document.getElementById(`chart-${id}`).getContext('2d');
                    chartInstance = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: datasets
                        },
                        options: {
                            responsive: true,
                            scales: {
                                x: {
                                    title: {
                                        display: true,
                                        text: '시간'
                                    }
                                },
                                y: {
                                    title: {
                                        display: true,
                                        // Y축 제목을 kbps로 변경
                                        text: '대역폭 (kbps)'
                                    },
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                    charts[id] = chartInstance;
                }
            }

            // 대시보드 초기화
            initializeDashboard();

            // 5초마다 데이터 업데이트
            setInterval(initializeDashboard, 5000);
        });
    </script>
</body>
</html>

